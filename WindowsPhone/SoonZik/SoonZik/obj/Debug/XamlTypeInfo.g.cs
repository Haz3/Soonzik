//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace SoonZik
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::SoonZik.SoonZik_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::SoonZik.SoonZik_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::SoonZik.SoonZik_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace SoonZik.SoonZik_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[56];
            _typeNameTable[0] = "SoonZik.ViewModel.ViewModelLocator";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "SoonZik.ViewModel.MainViewModel";
            _typeNameTable[3] = "GalaSoft.MvvmLight.ViewModelBase";
            _typeNameTable[4] = "GalaSoft.MvvmLight.ObservableObject";
            _typeNameTable[5] = "SoonZik.ViewModel.ConnexionViewModel";
            _typeNameTable[6] = "SoonZik.ViewModel.AccueilViewModel";
            _typeNameTable[7] = "SoonZik.ViewModel.NewsViewModel";
            _typeNameTable[8] = "SoonZik.ViewModel.PackViewModel";
            _typeNameTable[9] = "SoonZik.ViewModel.ProfilViewModel";
            _typeNameTable[10] = "SoonZik.ViewModel.MenuViewModel";
            _typeNameTable[11] = "SoonZik.ViewModel.ViewModel";
            _typeNameTable[12] = "SoonZik.ViewModel.BattleViewModel";
            _typeNameTable[13] = "SoonZik.ViewModel.GeolocViewModel";
            _typeNameTable[14] = "SoonZik.ViewModel.FriendViewModel";
            _typeNameTable[15] = "SoonZik.ViewModel.ConversationViewModel";
            _typeNameTable[16] = "SoonZik.Controls.NewsControl";
            _typeNameTable[17] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[18] = "SoonZik.Controls.Acceuil";
            _typeNameTable[19] = "SoonZik.Controls.Genre";
            _typeNameTable[20] = "SoonZik.Controls.MenuControl";
            _typeNameTable[21] = "Windows.UI.Xaml.Controls.Canvas";
            _typeNameTable[22] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[23] = "SoonZik.Controls.Player";
            _typeNameTable[24] = "SoonZik.Controls.PopUp";
            _typeNameTable[25] = "SoonZik.Views.MainView";
            _typeNameTable[26] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[27] = "SoonZik.MainPage";
            _typeNameTable[28] = "SoonZik.Views.Accueil";
            _typeNameTable[29] = "SoonZik.Views.Battle";
            _typeNameTable[30] = "Facebook.Client.Controls.LoginButton";
            _typeNameTable[31] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[32] = "String";
            _typeNameTable[33] = "Facebook.Client.Controls.Audience";
            _typeNameTable[34] = "System.Enum";
            _typeNameTable[35] = "System.ValueType";
            _typeNameTable[36] = "Boolean";
            _typeNameTable[37] = "Facebook.Client.FacebookSession";
            _typeNameTable[38] = "Facebook.Client.GraphUser";
            _typeNameTable[39] = "Facebook.Client.GraphObject";
            _typeNameTable[40] = "Windows.UI.Xaml.CornerRadius";
            _typeNameTable[41] = "SoonZik.Views.Connexion";
            _typeNameTable[42] = "SoonZik.Views.Conversation";
            _typeNameTable[43] = "SoonZik.Views.CustomSplashScreen";
            _typeNameTable[44] = "SoonZik.Views.Friends";
            _typeNameTable[45] = "SoonZik.Views.Geoloc";
            _typeNameTable[46] = "SoonZik.Views.Playlist";
            _typeNameTable[47] = "SoonZik.Views.Packs";
            _typeNameTable[48] = "SoonZik.Views.News";
            _typeNameTable[49] = "SoonZik.Views.Profil";
            _typeNameTable[50] = "LightStone.Controls.LightStone";
            _typeNameTable[51] = "Int32";
            _typeNameTable[52] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[53] = "Double";
            _typeNameTable[54] = "Windows.UI.Xaml.Media.Animation.EasingFunctionBase";
            _typeNameTable[55] = "SoonZik.Views.Search";

            _typeTable = new global::System.Type[56];
            _typeTable[0] = typeof(global::SoonZik.ViewModel.ViewModelLocator);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::SoonZik.ViewModel.MainViewModel);
            _typeTable[3] = typeof(global::GalaSoft.MvvmLight.ViewModelBase);
            _typeTable[4] = typeof(global::GalaSoft.MvvmLight.ObservableObject);
            _typeTable[5] = typeof(global::SoonZik.ViewModel.ConnexionViewModel);
            _typeTable[6] = typeof(global::SoonZik.ViewModel.AccueilViewModel);
            _typeTable[7] = typeof(global::SoonZik.ViewModel.NewsViewModel);
            _typeTable[8] = typeof(global::SoonZik.ViewModel.PackViewModel);
            _typeTable[9] = typeof(global::SoonZik.ViewModel.ProfilViewModel);
            _typeTable[10] = typeof(global::SoonZik.ViewModel.MenuViewModel);
            _typeTable[11] = typeof(global::SoonZik.ViewModel.ViewModel);
            _typeTable[12] = typeof(global::SoonZik.ViewModel.BattleViewModel);
            _typeTable[13] = typeof(global::SoonZik.ViewModel.GeolocViewModel);
            _typeTable[14] = typeof(global::SoonZik.ViewModel.FriendViewModel);
            _typeTable[15] = typeof(global::SoonZik.ViewModel.ConversationViewModel);
            _typeTable[16] = typeof(global::SoonZik.Controls.NewsControl);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[18] = typeof(global::SoonZik.Controls.Acceuil);
            _typeTable[19] = typeof(global::SoonZik.Controls.Genre);
            _typeTable[20] = typeof(global::SoonZik.Controls.MenuControl);
            _typeTable[21] = typeof(global::Windows.UI.Xaml.Controls.Canvas);
            _typeTable[22] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[23] = typeof(global::SoonZik.Controls.Player);
            _typeTable[24] = typeof(global::SoonZik.Controls.PopUp);
            _typeTable[25] = typeof(global::SoonZik.Views.MainView);
            _typeTable[26] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[27] = typeof(global::SoonZik.MainPage);
            _typeTable[28] = typeof(global::SoonZik.Views.Accueil);
            _typeTable[29] = typeof(global::SoonZik.Views.Battle);
            _typeTable[30] = typeof(global::Facebook.Client.Controls.LoginButton);
            _typeTable[31] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[32] = typeof(global::System.String);
            _typeTable[33] = typeof(global::Facebook.Client.Controls.Audience);
            _typeTable[34] = typeof(global::System.Enum);
            _typeTable[35] = typeof(global::System.ValueType);
            _typeTable[36] = typeof(global::System.Boolean);
            _typeTable[37] = typeof(global::Facebook.Client.FacebookSession);
            _typeTable[38] = typeof(global::Facebook.Client.GraphUser);
            _typeTable[39] = typeof(global::Facebook.Client.GraphObject);
            _typeTable[40] = typeof(global::Windows.UI.Xaml.CornerRadius);
            _typeTable[41] = typeof(global::SoonZik.Views.Connexion);
            _typeTable[42] = typeof(global::SoonZik.Views.Conversation);
            _typeTable[43] = typeof(global::SoonZik.Views.CustomSplashScreen);
            _typeTable[44] = typeof(global::SoonZik.Views.Friends);
            _typeTable[45] = typeof(global::SoonZik.Views.Geoloc);
            _typeTable[46] = typeof(global::SoonZik.Views.Playlist);
            _typeTable[47] = typeof(global::SoonZik.Views.Packs);
            _typeTable[48] = typeof(global::SoonZik.Views.News);
            _typeTable[49] = typeof(global::SoonZik.Views.Profil);
            _typeTable[50] = typeof(global::LightStone.Controls.LightStone);
            _typeTable[51] = typeof(global::System.Int32);
            _typeTable[52] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[53] = typeof(global::System.Double);
            _typeTable[54] = typeof(global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase);
            _typeTable[55] = typeof(global::SoonZik.Views.Search);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ViewModelLocator() { return new global::SoonZik.ViewModel.ViewModelLocator(); }
        private object Activate_2_MainViewModel() { return new global::SoonZik.ViewModel.MainViewModel(); }
        private object Activate_4_ObservableObject() { return new global::GalaSoft.MvvmLight.ObservableObject(); }
        private object Activate_5_ConnexionViewModel() { return new global::SoonZik.ViewModel.ConnexionViewModel(); }
        private object Activate_6_AccueilViewModel() { return new global::SoonZik.ViewModel.AccueilViewModel(); }
        private object Activate_7_NewsViewModel() { return new global::SoonZik.ViewModel.NewsViewModel(); }
        private object Activate_8_PackViewModel() { return new global::SoonZik.ViewModel.PackViewModel(); }
        private object Activate_9_ProfilViewModel() { return new global::SoonZik.ViewModel.ProfilViewModel(); }
        private object Activate_10_MenuViewModel() { return new global::SoonZik.ViewModel.MenuViewModel(); }
        private object Activate_11_ViewModel() { return new global::SoonZik.ViewModel.ViewModel(); }
        private object Activate_12_BattleViewModel() { return new global::SoonZik.ViewModel.BattleViewModel(); }
        private object Activate_13_GeolocViewModel() { return new global::SoonZik.ViewModel.GeolocViewModel(); }
        private object Activate_14_FriendViewModel() { return new global::SoonZik.ViewModel.FriendViewModel(); }
        private object Activate_15_ConversationViewModel() { return new global::SoonZik.ViewModel.ConversationViewModel(); }
        private object Activate_16_NewsControl() { return new global::SoonZik.Controls.NewsControl(); }
        private object Activate_18_Acceuil() { return new global::SoonZik.Controls.Acceuil(); }
        private object Activate_19_Genre() { return new global::SoonZik.Controls.Genre(); }
        private object Activate_20_MenuControl() { return new global::SoonZik.Controls.MenuControl(); }
        private object Activate_23_Player() { return new global::SoonZik.Controls.Player(); }
        private object Activate_24_PopUp() { return new global::SoonZik.Controls.PopUp(); }
        private object Activate_25_MainView() { return new global::SoonZik.Views.MainView(); }
        private object Activate_27_MainPage() { return new global::SoonZik.MainPage(); }
        private object Activate_28_Accueil() { return new global::SoonZik.Views.Accueil(); }
        private object Activate_29_Battle() { return new global::SoonZik.Views.Battle(); }
        private object Activate_30_LoginButton() { return new global::Facebook.Client.Controls.LoginButton(); }
        private object Activate_37_FacebookSession() { return new global::Facebook.Client.FacebookSession(); }
        private object Activate_38_GraphUser() { return new global::Facebook.Client.GraphUser(); }
        private object Activate_39_GraphObject() { return new global::Facebook.Client.GraphObject(); }
        private object Activate_41_Connexion() { return new global::SoonZik.Views.Connexion(); }
        private object Activate_42_Conversation() { return new global::SoonZik.Views.Conversation(); }
        private object Activate_44_Friends() { return new global::SoonZik.Views.Friends(); }
        private object Activate_45_Geoloc() { return new global::SoonZik.Views.Geoloc(); }
        private object Activate_46_Playlist() { return new global::SoonZik.Views.Playlist(); }
        private object Activate_47_Packs() { return new global::SoonZik.Views.Packs(); }
        private object Activate_48_News() { return new global::SoonZik.Views.News(); }
        private object Activate_49_Profil() { return new global::SoonZik.Views.Profil(); }
        private object Activate_50_LightStone() { return new global::LightStone.Controls.LightStone(); }
        private object Activate_55_Search() { return new global::SoonZik.Views.Search(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  SoonZik.ViewModel.ViewModelLocator
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_ViewModelLocator;
                userType.AddMemberName("Main");
                userType.AddMemberName("Connexion");
                userType.AddMemberName("Accueil");
                userType.AddMemberName("News");
                userType.AddMemberName("Pack");
                userType.AddMemberName("Profil");
                userType.AddMemberName("Menu");
                userType.AddMemberName("View");
                userType.AddMemberName("Battle");
                userType.AddMemberName("Geoloc");
                userType.AddMemberName("Friend");
                userType.AddMemberName("Conversation");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  SoonZik.ViewModel.MainViewModel
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  GalaSoft.MvvmLight.ViewModelBase
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                xamlType = userType;
                break;

            case 4:   //  GalaSoft.MvvmLight.ObservableObject
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_ObservableObject;
                xamlType = userType;
                break;

            case 5:   //  SoonZik.ViewModel.ConnexionViewModel
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  SoonZik.ViewModel.AccueilViewModel
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  SoonZik.ViewModel.NewsViewModel
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  SoonZik.ViewModel.PackViewModel
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  SoonZik.ViewModel.ProfilViewModel
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  SoonZik.ViewModel.MenuViewModel
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  SoonZik.ViewModel.ViewModel
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  SoonZik.ViewModel.BattleViewModel
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_12_BattleViewModel;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  SoonZik.ViewModel.GeolocViewModel
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  SoonZik.ViewModel.FriendViewModel
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  SoonZik.ViewModel.ConversationViewModel
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  SoonZik.Controls.NewsControl
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_16_NewsControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  SoonZik.Controls.Acceuil
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_18_Acceuil;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  SoonZik.Controls.Genre
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_19_Genre;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  SoonZik.Controls.MenuControl
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Canvas"));
                userType.Activator = Activate_20_MenuControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Windows.UI.Xaml.Controls.Canvas
                xamlType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  SoonZik.Controls.Player
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_23_Player;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  SoonZik.Controls.PopUp
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_24_PopUp;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  SoonZik.Views.MainView
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_25_MainView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  SoonZik.MainPage
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  SoonZik.Views.Accueil
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_28_Accueil;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  SoonZik.Views.Battle
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_Battle;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Facebook.Client.Controls.LoginButton
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_30_LoginButton;
                userType.AddMemberName("ApplicationId");
                userType.AddMemberName("DefaultAudience");
                userType.AddMemberName("Permissions");
                userType.AddMemberName("FetchUserInfo");
                userType.AddMemberName("CurrentSession");
                userType.AddMemberName("CurrentUser");
                userType.AddMemberName("CornerRadius");
                xamlType = userType;
                break;

            case 31:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  String
                xamlType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Facebook.Client.Controls.Audience
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Facebook.Client.Controls.Audience.None);
                userType.AddEnumValue("OnlyMe", global::Facebook.Client.Controls.Audience.OnlyMe);
                userType.AddEnumValue("Friends", global::Facebook.Client.Controls.Audience.Friends);
                userType.AddEnumValue("Everyone", global::Facebook.Client.Controls.Audience.Everyone);
                xamlType = userType;
                break;

            case 34:   //  System.Enum
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 35:   //  System.ValueType
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 36:   //  Boolean
                xamlType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  Facebook.Client.FacebookSession
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 38:   //  Facebook.Client.GraphUser
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Facebook.Client.GraphObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 39:   //  Facebook.Client.GraphObject
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_39_GraphObject;
                xamlType = userType;
                break;

            case 40:   //  Windows.UI.Xaml.CornerRadius
                xamlType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 41:   //  SoonZik.Views.Connexion
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_41_Connexion;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  SoonZik.Views.Conversation
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_42_Conversation;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  SoonZik.Views.CustomSplashScreen
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  SoonZik.Views.Friends
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_44_Friends;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 45:   //  SoonZik.Views.Geoloc
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_45_Geoloc;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  SoonZik.Views.Playlist
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_46_Playlist;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  SoonZik.Views.Packs
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_47_Packs;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  SoonZik.Views.News
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_48_News;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 49:   //  SoonZik.Views.Profil
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_49_Profil;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 50:   //  LightStone.Controls.LightStone
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Canvas"));
                userType.Activator = Activate_50_LightStone;
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("SelectedIndex");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("TransitionDuration");
                userType.AddMemberName("Depth");
                userType.AddMemberName("MaxVisibleItems");
                userType.AddMemberName("Rotation");
                userType.AddMemberName("TranslateY");
                userType.AddMemberName("TranslateX");
                userType.AddMemberName("EasingFunction");
                xamlType = userType;
                break;

            case 51:   //  Int32
                xamlType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 52:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 53:   //  Double
                xamlType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 54:   //  Windows.UI.Xaml.Media.Animation.EasingFunctionBase
                xamlType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 55:   //  SoonZik.Views.Search
                userType = new global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_55_Search;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Facebook.Client.Facebook_Client_Universal_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_ViewModelLocator_Main(object instance)
        {
            var that = (global::SoonZik.ViewModel.ViewModelLocator)instance;
            return that.Main;
        }
        private object get_1_ViewModelLocator_Connexion(object instance)
        {
            var that = (global::SoonZik.ViewModel.ViewModelLocator)instance;
            return that.Connexion;
        }
        private object get_2_ViewModelLocator_Accueil(object instance)
        {
            var that = (global::SoonZik.ViewModel.ViewModelLocator)instance;
            return that.Accueil;
        }
        private object get_3_ViewModelLocator_News(object instance)
        {
            var that = (global::SoonZik.ViewModel.ViewModelLocator)instance;
            return that.News;
        }
        private object get_4_ViewModelLocator_Pack(object instance)
        {
            var that = (global::SoonZik.ViewModel.ViewModelLocator)instance;
            return that.Pack;
        }
        private object get_5_ViewModelLocator_Profil(object instance)
        {
            var that = (global::SoonZik.ViewModel.ViewModelLocator)instance;
            return that.Profil;
        }
        private object get_6_ViewModelLocator_Menu(object instance)
        {
            var that = (global::SoonZik.ViewModel.ViewModelLocator)instance;
            return that.Menu;
        }
        private object get_7_ViewModelLocator_View(object instance)
        {
            var that = (global::SoonZik.ViewModel.ViewModelLocator)instance;
            return that.View;
        }
        private object get_8_ViewModelLocator_Battle(object instance)
        {
            var that = (global::SoonZik.ViewModel.ViewModelLocator)instance;
            return that.Battle;
        }
        private object get_9_ViewModelLocator_Geoloc(object instance)
        {
            var that = (global::SoonZik.ViewModel.ViewModelLocator)instance;
            return that.Geoloc;
        }
        private object get_10_ViewModelLocator_Friend(object instance)
        {
            var that = (global::SoonZik.ViewModel.ViewModelLocator)instance;
            return that.Friend;
        }
        private object get_11_ViewModelLocator_Conversation(object instance)
        {
            var that = (global::SoonZik.ViewModel.ViewModelLocator)instance;
            return that.Conversation;
        }
        private object get_12_LoginButton_ApplicationId(object instance)
        {
            var that = (global::Facebook.Client.Controls.LoginButton)instance;
            return that.ApplicationId;
        }
        private void set_12_LoginButton_ApplicationId(object instance, object Value)
        {
            var that = (global::Facebook.Client.Controls.LoginButton)instance;
            that.ApplicationId = (global::System.String)Value;
        }
        private object get_13_LoginButton_DefaultAudience(object instance)
        {
            var that = (global::Facebook.Client.Controls.LoginButton)instance;
            return that.DefaultAudience;
        }
        private void set_13_LoginButton_DefaultAudience(object instance, object Value)
        {
            var that = (global::Facebook.Client.Controls.LoginButton)instance;
            that.DefaultAudience = (global::Facebook.Client.Controls.Audience)Value;
        }
        private object get_14_LoginButton_Permissions(object instance)
        {
            var that = (global::Facebook.Client.Controls.LoginButton)instance;
            return that.Permissions;
        }
        private void set_14_LoginButton_Permissions(object instance, object Value)
        {
            var that = (global::Facebook.Client.Controls.LoginButton)instance;
            that.Permissions = (global::System.String)Value;
        }
        private object get_15_LoginButton_FetchUserInfo(object instance)
        {
            var that = (global::Facebook.Client.Controls.LoginButton)instance;
            return that.FetchUserInfo;
        }
        private void set_15_LoginButton_FetchUserInfo(object instance, object Value)
        {
            var that = (global::Facebook.Client.Controls.LoginButton)instance;
            that.FetchUserInfo = (global::System.Boolean)Value;
        }
        private object get_16_LoginButton_CurrentSession(object instance)
        {
            var that = (global::Facebook.Client.Controls.LoginButton)instance;
            return that.CurrentSession;
        }
        private object get_17_LoginButton_CurrentUser(object instance)
        {
            var that = (global::Facebook.Client.Controls.LoginButton)instance;
            return that.CurrentUser;
        }
        private object get_18_LoginButton_CornerRadius(object instance)
        {
            var that = (global::Facebook.Client.Controls.LoginButton)instance;
            return that.CornerRadius;
        }
        private void set_18_LoginButton_CornerRadius(object instance, object Value)
        {
            var that = (global::Facebook.Client.Controls.LoginButton)instance;
            that.CornerRadius = (global::Windows.UI.Xaml.CornerRadius)Value;
        }
        private object get_19_LightStone_ItemsSource(object instance)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            return that.ItemsSource;
        }
        private void set_19_LightStone_ItemsSource(object instance, object Value)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_20_LightStone_SelectedIndex(object instance)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            return that.SelectedIndex;
        }
        private void set_20_LightStone_SelectedIndex(object instance, object Value)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_21_LightStone_ItemTemplate(object instance)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            return that.ItemTemplate;
        }
        private void set_21_LightStone_ItemTemplate(object instance, object Value)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            that.ItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_22_LightStone_TransitionDuration(object instance)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            return that.TransitionDuration;
        }
        private void set_22_LightStone_TransitionDuration(object instance, object Value)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            that.TransitionDuration = (global::System.Int32)Value;
        }
        private object get_23_LightStone_Depth(object instance)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            return that.Depth;
        }
        private void set_23_LightStone_Depth(object instance, object Value)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            that.Depth = (global::System.Double)Value;
        }
        private object get_24_LightStone_MaxVisibleItems(object instance)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            return that.MaxVisibleItems;
        }
        private void set_24_LightStone_MaxVisibleItems(object instance, object Value)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            that.MaxVisibleItems = (global::System.Int32)Value;
        }
        private object get_25_LightStone_Rotation(object instance)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            return that.Rotation;
        }
        private void set_25_LightStone_Rotation(object instance, object Value)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            that.Rotation = (global::System.Double)Value;
        }
        private object get_26_LightStone_TranslateY(object instance)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            return that.TranslateY;
        }
        private void set_26_LightStone_TranslateY(object instance, object Value)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            that.TranslateY = (global::System.Int32)Value;
        }
        private object get_27_LightStone_TranslateX(object instance)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            return that.TranslateX;
        }
        private void set_27_LightStone_TranslateX(object instance, object Value)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            that.TranslateX = (global::System.Int32)Value;
        }
        private object get_28_LightStone_EasingFunction(object instance)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            return that.EasingFunction;
        }
        private void set_28_LightStone_EasingFunction(object instance, object Value)
        {
            var that = (global::LightStone.Controls.LightStone)instance;
            that.EasingFunction = (global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::SoonZik.SoonZik_XamlTypeInfo.XamlMember xamlMember = null;
            global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "SoonZik.ViewModel.ViewModelLocator.Main":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SoonZik.ViewModel.ViewModelLocator");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "Main", "SoonZik.ViewModel.MainViewModel");
                xamlMember.Getter = get_0_ViewModelLocator_Main;
                xamlMember.SetIsReadOnly();
                break;
            case "SoonZik.ViewModel.ViewModelLocator.Connexion":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SoonZik.ViewModel.ViewModelLocator");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "Connexion", "SoonZik.ViewModel.ConnexionViewModel");
                xamlMember.Getter = get_1_ViewModelLocator_Connexion;
                xamlMember.SetIsReadOnly();
                break;
            case "SoonZik.ViewModel.ViewModelLocator.Accueil":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SoonZik.ViewModel.ViewModelLocator");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "Accueil", "SoonZik.ViewModel.AccueilViewModel");
                xamlMember.Getter = get_2_ViewModelLocator_Accueil;
                xamlMember.SetIsReadOnly();
                break;
            case "SoonZik.ViewModel.ViewModelLocator.News":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SoonZik.ViewModel.ViewModelLocator");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "News", "SoonZik.ViewModel.NewsViewModel");
                xamlMember.Getter = get_3_ViewModelLocator_News;
                xamlMember.SetIsReadOnly();
                break;
            case "SoonZik.ViewModel.ViewModelLocator.Pack":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SoonZik.ViewModel.ViewModelLocator");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "Pack", "SoonZik.ViewModel.PackViewModel");
                xamlMember.Getter = get_4_ViewModelLocator_Pack;
                xamlMember.SetIsReadOnly();
                break;
            case "SoonZik.ViewModel.ViewModelLocator.Profil":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SoonZik.ViewModel.ViewModelLocator");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "Profil", "SoonZik.ViewModel.ProfilViewModel");
                xamlMember.Getter = get_5_ViewModelLocator_Profil;
                xamlMember.SetIsReadOnly();
                break;
            case "SoonZik.ViewModel.ViewModelLocator.Menu":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SoonZik.ViewModel.ViewModelLocator");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "Menu", "SoonZik.ViewModel.MenuViewModel");
                xamlMember.Getter = get_6_ViewModelLocator_Menu;
                xamlMember.SetIsReadOnly();
                break;
            case "SoonZik.ViewModel.ViewModelLocator.View":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SoonZik.ViewModel.ViewModelLocator");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "View", "SoonZik.ViewModel.ViewModel");
                xamlMember.Getter = get_7_ViewModelLocator_View;
                xamlMember.SetIsReadOnly();
                break;
            case "SoonZik.ViewModel.ViewModelLocator.Battle":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SoonZik.ViewModel.ViewModelLocator");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "Battle", "SoonZik.ViewModel.BattleViewModel");
                xamlMember.Getter = get_8_ViewModelLocator_Battle;
                xamlMember.SetIsReadOnly();
                break;
            case "SoonZik.ViewModel.ViewModelLocator.Geoloc":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SoonZik.ViewModel.ViewModelLocator");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "Geoloc", "SoonZik.ViewModel.GeolocViewModel");
                xamlMember.Getter = get_9_ViewModelLocator_Geoloc;
                xamlMember.SetIsReadOnly();
                break;
            case "SoonZik.ViewModel.ViewModelLocator.Friend":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SoonZik.ViewModel.ViewModelLocator");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "Friend", "SoonZik.ViewModel.FriendViewModel");
                xamlMember.Getter = get_10_ViewModelLocator_Friend;
                xamlMember.SetIsReadOnly();
                break;
            case "SoonZik.ViewModel.ViewModelLocator.Conversation":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SoonZik.ViewModel.ViewModelLocator");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "Conversation", "SoonZik.ViewModel.ConversationViewModel");
                xamlMember.Getter = get_11_ViewModelLocator_Conversation;
                xamlMember.SetIsReadOnly();
                break;
            case "Facebook.Client.Controls.LoginButton.ApplicationId":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Facebook.Client.Controls.LoginButton");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "ApplicationId", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_LoginButton_ApplicationId;
                xamlMember.Setter = set_12_LoginButton_ApplicationId;
                break;
            case "Facebook.Client.Controls.LoginButton.DefaultAudience":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Facebook.Client.Controls.LoginButton");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "DefaultAudience", "Facebook.Client.Controls.Audience");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_LoginButton_DefaultAudience;
                xamlMember.Setter = set_13_LoginButton_DefaultAudience;
                break;
            case "Facebook.Client.Controls.LoginButton.Permissions":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Facebook.Client.Controls.LoginButton");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "Permissions", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_LoginButton_Permissions;
                xamlMember.Setter = set_14_LoginButton_Permissions;
                break;
            case "Facebook.Client.Controls.LoginButton.FetchUserInfo":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Facebook.Client.Controls.LoginButton");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "FetchUserInfo", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_LoginButton_FetchUserInfo;
                xamlMember.Setter = set_15_LoginButton_FetchUserInfo;
                break;
            case "Facebook.Client.Controls.LoginButton.CurrentSession":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Facebook.Client.Controls.LoginButton");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "CurrentSession", "Facebook.Client.FacebookSession");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_LoginButton_CurrentSession;
                xamlMember.SetIsReadOnly();
                break;
            case "Facebook.Client.Controls.LoginButton.CurrentUser":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Facebook.Client.Controls.LoginButton");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "CurrentUser", "Facebook.Client.GraphUser");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_LoginButton_CurrentUser;
                xamlMember.SetIsReadOnly();
                break;
            case "Facebook.Client.Controls.LoginButton.CornerRadius":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Facebook.Client.Controls.LoginButton");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "CornerRadius", "Windows.UI.Xaml.CornerRadius");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_LoginButton_CornerRadius;
                xamlMember.Setter = set_18_LoginButton_CornerRadius;
                break;
            case "LightStone.Controls.LightStone.ItemsSource":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightStone.Controls.LightStone");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_LightStone_ItemsSource;
                xamlMember.Setter = set_19_LightStone_ItemsSource;
                break;
            case "LightStone.Controls.LightStone.SelectedIndex":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightStone.Controls.LightStone");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_LightStone_SelectedIndex;
                xamlMember.Setter = set_20_LightStone_SelectedIndex;
                break;
            case "LightStone.Controls.LightStone.ItemTemplate":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightStone.Controls.LightStone");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_21_LightStone_ItemTemplate;
                xamlMember.Setter = set_21_LightStone_ItemTemplate;
                break;
            case "LightStone.Controls.LightStone.TransitionDuration":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightStone.Controls.LightStone");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "TransitionDuration", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_LightStone_TransitionDuration;
                xamlMember.Setter = set_22_LightStone_TransitionDuration;
                break;
            case "LightStone.Controls.LightStone.Depth":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightStone.Controls.LightStone");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "Depth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_LightStone_Depth;
                xamlMember.Setter = set_23_LightStone_Depth;
                break;
            case "LightStone.Controls.LightStone.MaxVisibleItems":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightStone.Controls.LightStone");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "MaxVisibleItems", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_LightStone_MaxVisibleItems;
                xamlMember.Setter = set_24_LightStone_MaxVisibleItems;
                break;
            case "LightStone.Controls.LightStone.Rotation":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightStone.Controls.LightStone");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "Rotation", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_LightStone_Rotation;
                xamlMember.Setter = set_25_LightStone_Rotation;
                break;
            case "LightStone.Controls.LightStone.TranslateY":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightStone.Controls.LightStone");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "TranslateY", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_LightStone_TranslateY;
                xamlMember.Setter = set_26_LightStone_TranslateY;
                break;
            case "LightStone.Controls.LightStone.TranslateX":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightStone.Controls.LightStone");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "TranslateX", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_LightStone_TranslateX;
                xamlMember.Setter = set_27_LightStone_TranslateX;
                break;
            case "LightStone.Controls.LightStone.EasingFunction":
                userType = (global::SoonZik.SoonZik_XamlTypeInfo.XamlUserType)GetXamlTypeByName("LightStone.Controls.LightStone");
                xamlMember = new global::SoonZik.SoonZik_XamlTypeInfo.XamlMember(this, "EasingFunction", "Windows.UI.Xaml.Media.Animation.EasingFunctionBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_LightStone_EasingFunction;
                xamlMember.Setter = set_28_LightStone_EasingFunction;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::SoonZik.SoonZik_XamlTypeInfo.XamlSystemBaseType
    {
        global::SoonZik.SoonZik_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::SoonZik.SoonZik_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::SoonZik.SoonZik_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::SoonZik.SoonZik_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


